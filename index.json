[{"categories":null,"contents":"golang解析json常用的方法有2种 定义struct package main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; ) type Student struct { Name string `json:\u0026#34;Name\u0026#34;` Age int `json:\u0026#34;Age\u0026#34;` Sex string `json:\u0026#34;Sex\u0026#34;` } type Class struct { ClassName string `json:\u0026#34;ClassName\u0026#34;` Students []Student } type School struct { SchoolName string Id int64 `json:\u0026#34;Id\u0026#34;` Class map[string]Class } func main() { jsonData := []byte(` { \u0026#34;SchoolName\u0026#34;: \u0026#34;Standard\u0026#34;, \u0026#34;Class\u0026#34; : { \u0026#34;1\u0026#34;: { \u0026#34;ClassName\u0026#34;: \u0026#34;一年级1班\u0026#34;, \u0026#34;Students\u0026#34;: [ { \u0026#34;Name\u0026#34;:\u0026#34;小明\u0026#34;, \u0026#34;Age\u0026#34;:5, \u0026#34;Sex\u0026#34;:\u0026#34;男\u0026#34; }, { \u0026#34;Name\u0026#34;:\u0026#34;小花\u0026#34;, \u0026#34;Age\u0026#34;:5, \u0026#34;Sex\u0026#34;:\u0026#34;女\u0026#34; } ] }, \u0026#34;2\u0026#34;: { \u0026#34;ClassName\u0026#34;: \u0026#34;一年级2班\u0026#34;, \u0026#34;Students\u0026#34;: [ { \u0026#34;Name\u0026#34;:\u0026#34;小强\u0026#34;, \u0026#34;Age\u0026#34;:6, \u0026#34;Sex\u0026#34;:\u0026#34;男\u0026#34; }, { \u0026#34;Name\u0026#34;:\u0026#34;小刚\u0026#34;, \u0026#34;Age\u0026#34;:5, \u0026#34;Sex\u0026#34;:\u0026#34;男\u0026#34; } ] } }, \u0026#34;Id\u0026#34;: 999 }`) var s School err := json.Unmarshal(jsonData, \u0026amp;s) if err != nil { fmt.Println(err) } for _, class := range s.Class { fmt.Println(class.ClassName) for _, student := range class.Students { fmt.Println(student.Name, student.Age, student.Sex) } } } 使用interface类型断言 switch 和 for要嵌套很多层\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { jsonData := []byte(` { \u0026#34;SchoolName\u0026#34;: \u0026#34;Standard\u0026#34;, \u0026#34;Class\u0026#34; : { \u0026#34;1\u0026#34;: { \u0026#34;ClassName\u0026#34;: \u0026#34;一年级1班\u0026#34;, \u0026#34;Students\u0026#34;: [ { \u0026#34;Name\u0026#34;:\u0026#34;小明\u0026#34;, \u0026#34;Age\u0026#34;:5, \u0026#34;Sex\u0026#34;:\u0026#34;男\u0026#34; }, { \u0026#34;Name\u0026#34;:\u0026#34;小花\u0026#34;, \u0026#34;Age\u0026#34;:5, \u0026#34;Sex\u0026#34;:\u0026#34;女\u0026#34; } ] }, \u0026#34;2\u0026#34;: { \u0026#34;ClassName\u0026#34;: \u0026#34;一年级2班\u0026#34;, \u0026#34;Students\u0026#34;: [ { \u0026#34;Name\u0026#34;:\u0026#34;小强\u0026#34;, \u0026#34;Age\u0026#34;:6, \u0026#34;Sex\u0026#34;:\u0026#34;男\u0026#34; }, { \u0026#34;Name\u0026#34;:\u0026#34;小刚\u0026#34;, \u0026#34;Age\u0026#34;:5, \u0026#34;Sex\u0026#34;:\u0026#34;男\u0026#34; } ] } }, \u0026#34;Id\u0026#34;: 999 }`) var i interface{} json.Unmarshal(jsonData, \u0026amp;i) data := i.(map[string]interface{}) for k, v := range data { switch v := v.(type) { case string: fmt.Println(\u0026#34;string\u0026#34;, k, v) case []interface{}: //fmt.Println(\u0026#34;array[]\u0026#34;, k) \tfor kk, vv := range v { fmt.Println(kk, vv) } case map[string]interface{}: //fmt.Println(\u0026#34;array[string]\u0026#34;) \tfor kk, vv := range v { switch vv := vv.(type) { case string: fmt.Println(\u0026#34;string\u0026#34;, kk, vv) case []interface{}: //fmt.Println(\u0026#34;array[]\u0026#34;, kk) \tcase map[string]interface{}: //fmt.Println(\u0026#34;array[string]\u0026#34;, kk) \tfor kkk, vvv := range vv { switch vvv := vvv.(type) { case string: fmt.Println(\u0026#34;string\u0026#34;, kkk, vvv) case []interface{}: for kkkk, vvvv := range vvv { switch vvvv := vvvv.(type) { case string: fmt.Println(kkkk) case map[string]interface{}: for kkkkk, vvvvv := range vvvv { fmt.Println(kkkkk, vvvvv) } } } default: } } default: fmt.Println(\u0026#34; \u0026#34;) } } default: fmt.Println(k, v) } } fmt.Println(time.Now()) } ","date":"2021-05-03T23:40:58Z","permalink":"https://www.johnyn.com/2021/05/03/golang%E8%A7%A3%E6%9E%90json/","section":"post","tags":"go json struct","title":"golang解析json"},{"categories":null,"contents":"博客加入搜索引擎收录  以baidu和google对比\n 结论：百度-OUT 如图所示9月17号以添加百度收录，已过去2周还无动静 搜索指定标题搜不到 9月25日添加google,第二天就能搜索到了 ","date":"2020-09-30T11:48:44Z","permalink":"https://www.johnyn.com/2020/09/30/%E7%BD%91%E7%AB%99%E5%8A%A0%E5%85%A5%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%AE%9E%E8%B7%B5/","section":"post","tags":["baidu","google","搜索引擎收录"],"title":"网站加入搜索引擎实践"},{"categories":null,"contents":"安装   下载elasticsearch并解压\nwget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.8.1-linux-x86_64.tar.gz\ntar -zxvf elasticsearch-7.8.1 \u0026amp;\u0026amp; cd elasticsearch-7.8.1\n  启动elasticsearch并解压\n./bin/elasticsearch -d\n  下载kibana\nwget https://artifacts.elastic.co/downloads/kibana/kibana-7.8.1-linux-x86_64.tar.gz\ntar -zxvf kibana-7.8.1-linux-x86_64.tar.gz \u0026amp;\u0026amp; cd kibana-7.8.1-linux-x86_64\n  启动kibana\n./bin/kibana\n  下载logstash并解压\nwget https://artifacts.elastic.co/downloads/logstash/logstash-7.8.1.tar.gz\ntar -zxvf logstash-7.8.1.tar.gz \u0026amp;\u0026amp; cd logstash-7.8.1\n  下载mysql-connector-java并解压 wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.21.tar.gz\ntar -zxvf mysql-connector-java-8.0.21.tar.gz\n  新建logstash/config/conf/mysql.conf文件，配置如下\n  # 数据库 input { stdin { } jdbc { jdbc_driver_library =\u0026gt; \u0026#34;/home/ling/logstash-7.8.1/mysql-connector-java-8.0.21-bin.jar\u0026#34; jdbc_driver_class =\u0026gt; \u0026#34;com.mysql.jdbc.Driver\u0026#34; jdbc_connection_string =\u0026gt; \u0026#34;jdbc:mysql://localhost:3306/test\u0026#34; jdbc_user =\u0026gt; \u0026#34;root\u0026#34; jdbc_password =\u0026gt; \u0026#34;111111\u0026#34; schedule =\u0026gt; \u0026#34;* * * * *\u0026#34; statement =\u0026gt; \u0026#34;select id,name,age from user\u0026#34; columns_charset =\u0026gt; { \u0026#34;content\u0026#34; =\u0026gt; \u0026#34;UTF-8\u0026#34; } type =\u0026gt; \u0026#34;user\u0026#34; } } filter { if [type] == \u0026#34;user\u0026#34; { urldecode{ all_fields=\u0026gt;true } } } output { if [type] == \u0026#34;user\u0026#34;{ elasticsearch { hosts =\u0026gt; \u0026#34;localhost:9200\u0026#34; index =\u0026gt; \u0026#34;user\u0026#34; document_id =\u0026gt; \u0026#34;%{id}\u0026#34; } } } 新建logstash/config/conf/log.conf文件，配置如下  #日志文件 input { file { path =\u0026gt; \u0026#34;/home/ling/project/log/*.log\u0026#34; type =\u0026gt; \u0026#34;runtime\u0026#34; start_position =\u0026gt; \u0026#34;beginning\u0026#34; #从文件开始处读写 } } filter { if [type] == \u0026#34;runtime\u0026#34; { urldecode{ all_fields=\u0026gt;true } } } output{ if [type] == \u0026#34;runtime\u0026#34;{ elasticsearch { hosts=\u0026gt;[\u0026#34;127.0.0.1:9200\u0026#34;] index =\u0026gt; \u0026#34;runtime_log\u0026#34; #对日志进行索引归档 } } stdout{codec =\u0026gt; rubydebug} } 启动logstash\n./bin/logstash -f config/conf  ","date":"2020-09-16T11:48:44Z","permalink":"https://www.johnyn.com/2020/09/16/elk%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Alogstash%E8%87%AA%E5%8A%A8%E6%94%B6%E9%9B%86%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%92%8C%E5%90%8C%E6%AD%A5mysql%E6%95%B0%E6%8D%AE%E5%88%9D%E6%8E%A2/","section":"post","tags":["Elasticsearch","Logstash","Kibana"],"title":"ELK安装以及logstash自动收集日志文件和同步mysql数据初探"},{"categories":null,"contents":" 迁移的原因：Hugo生成静态页面速度飞快，相比基于node.js的Hexo快太多了\n 首先安装Hugo 安装方式以及运行方式看官方网站：gohugo.io，或者gohugo.org\n博文md文件迁移  把Hexo目录下的博文md文件拷贝到hugo运行目录/content/post目录 确保文件开头内容格式如下,否则title、date、tags可能会提取错误\n2.1 date的格式是YYYY-mm-dd, tags的格式是数组  --- title: 标题 date: 2020-09-15 16:16:05 tags: [\u0026#34;hexo\u0026#34;,\u0026#34;hugo\u0026#34;,\u0026#34;theme\u0026#34;] --- theme定制 以官网推荐主题hyde为例 cd themes git clone https://github.com/spf13/hyde.git #目录结构如下 ├── CHANGELOG.md ├── LICENSE.md ├── README.md ├── archetypes │ └── default.md ├── go.mod ├── images │ ├── screenshot.png │ └── tn.png ├── layouts │ ├── 404.html │ ├── _default │ │ ├── baseof.html │ │ ├── list.html │ │ └── single.html │ ├── index.html │ └── partials │ ├── head.html │ ├── head_fonts.html │ ├── hook_head_end.html │ └── sidebar.html ├── static │ ├── apple-touch-icon-144-precomposed.png │ ├── css │ │ ├── hyde.css │ │ ├── poole.css │ │ ├── print.css │ │ └── syntax.css │ └── favicon.png └── theme.toml 增加搜索功能  参考网上分享的方法，使用fuse.min.js  修改css 增加翻页功能  layouts/index.html #增加内容  {{ $paginator := .Paginate (where .Data.Pages \u0026#34;Type\u0026#34; \u0026#34;post\u0026#34;) }} {{ range $paginator.Pages }} {{ .Render \u0026#34;index\u0026#34; }} {{ end }} {{ partial \u0026#34;pagination.html\u0026#34; $paginator }}  layouts/partials/pagination.html #增加模板文件  \u0026lt;nav class=\u0026#34;pagination\u0026#34;\u0026gt; {{if .HasPrev}} \u0026lt;a class=\u0026#34;newer-posts\u0026#34; href=\u0026#34;{{ .Prev.URL }}\u0026#34;\u0026gt;\u0026amp;larr; 上一页\u0026lt;/a\u0026gt; {{end}} \u0026lt;span class=\u0026#34;page-number\u0026#34;\u0026gt;Page {{ .PageNumber }} of {{.TotalPages}}\u0026lt;/span\u0026gt; {{if .HasNext}} \u0026lt;a class=\u0026#34;older-posts\u0026#34; href=\u0026#34;{{ .Next.URL }}\u0026#34;\u0026gt;下一页 \u0026amp;rarr;\u0026lt;/a\u0026gt; {{end}} \u0026lt;/nav\u0026gt; 定制theme后的目录结构  theme以开源hugo-theme-ling  ├── LICENSE ├── README.md ├── archetypes │ └── default.md ├── images │ └── theme.png ├── layouts │ ├── 404.html │ ├── _default │ │ ├── baseof.html #base模板 │ │ ├── index.json #搜索要用到 │ │ ├── list.html #tag列表页 │ │ └── single.html #博文详情页 │ ├── index.html │ └── partials │ ├── footer.html #网站footer │ ├── head.html #网站header │ ├── pagination.html #翻页 │ └── sidebar.html #sidebar ├── static │ ├── css │ │ └── style.css #style │ ├── favicon.png │ ├── img │ └── js │ ├── fuse.min.js #搜索要用到 │ └── search.js #搜索要用到 └── theme.toml ","date":"2020-09-15T16:16:05Z","permalink":"https://www.johnyn.com/2020/09/15/%E5%9F%BA%E4%BA%8Ehexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E8%BF%81%E7%A7%BB%E5%88%B0hugo%E5%B9%B6%E5%AE%9A%E5%88%B6theme/","section":"post","tags":["hexo","hugo","theme"],"title":"基于Hexo的个人博客静态网站迁移到Hugo并定制theme"},{"categories":null,"contents":" 拉取要修改的仓库\ngit clone https://xxx/xxxx.git 进入本地目录\ncd xxxx  拉取远程所有分支\ngit branch -r | grep -v \u0026lsquo;-\u0026gt;\u0026rsquo; | while read remote; do git branch \u0026ndash;track \u0026ldquo;${remote#origin/}\u0026rdquo; \u0026ldquo;$remote\u0026rdquo;; done\ngit fetch \u0026ndash;all\ngit pull \u0026ndash;all  执行修改命令  git filter-branch --env-filter \u0026#39; OLD_EMAIL=\u0026#34;xxx@163.com\u0026#34; OLD_NAME=\u0026#34;xxx@163.com\u0026#34; CORRECT_NAME=\u0026#34;bbbbb\u0026#34; CORRECT_EMAIL=\u0026#34;bbbbb@qq.com\u0026#34; if [ \u0026#34;$GIT_COMMITTER_EMAIL\u0026#34; = \u0026#34;$OLD_EMAIL\u0026#34; ] then export GIT_COMMITTER_NAME=\u0026#34;$CORRECT_NAME\u0026#34; export GIT_COMMITTER_EMAIL=\u0026#34;$CORRECT_EMAIL\u0026#34; fi if [ \u0026#34;$GIT_AUTHOR_EMAIL\u0026#34; = \u0026#34;$OLD_EMAIL\u0026#34; ] then export GIT_AUTHOR_NAME=\u0026#34;$CORRECT_NAME\u0026#34; export GIT_AUTHOR_EMAIL=\u0026#34;$CORRECT_EMAIL\u0026#34; fi if [ \u0026#34;$GIT_AUTHOR_NAME\u0026#34; = \u0026#34;$OLD_NAME\u0026#34; ] then export GIT_AUTHOR_NAME=\u0026#34;$CORRECT_NAME\u0026#34; export GIT_AUTHOR_EMAIL=\u0026#34;$CORRECT_EMAIL\u0026#34; fi \u0026#39; --tag-name-filter cat -- --branches --tags 把修改 commit 信息提交\ngit push \u0026ndash;force \u0026ndash;tags origin \u0026lsquo;refs/heads/*\u0026rsquo;  ","date":"2020-06-03T23:40:58Z","permalink":"https://www.johnyn.com/2020/06/03/git%E4%BF%AE%E6%94%B9%E5%B7%B2commit%E7%9A%84name%E5%92%8Cemail/","section":"post","tags":"git","title":"git修改已commit的name和email"},{"categories":null,"contents":"  访问https://serverless.cloud.tencent.com/\n  点击快速部署组件的按钮 website,创建一个应用，复制该应用的 bucketName，比如： sls-cloudfunction-website-动态变化的值-code\n  安装 serverless\nnpm i -g serverless 或 curl -o- -L https://slss.io/install | bash\n  创建静态网站\nmkdir website \u0026amp;\u0026amp; vi website/index.html,增加内容 helloworld\n  增加 serverless 配置文件\nvi serverless.yml\n  website: component: \u0026#34;@serverless/tencent-website\u0026#34; inputs: code: src: website index: index.html error: 404.html region: ap-guangzhou bucketName: sls-cloudfunction-website-动态变化的值-code  执行 sls \u0026ndash;debug ,可以看到运行情况，看到二维码就用微信扫码验证\n  在我的应用里访问部署的 website 服务\n  ","date":"2020-01-10T16:16:05Z","permalink":"https://www.johnyn.com/2020/01/10/%E4%BD%BF%E7%94%A8%E8%85%BE%E8%AE%AF%E4%BA%91serverless-framework%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/","section":"post","tags":"serverless","title":"使用腾讯云Serverless Framework搭建静态网站"},{"categories":null,"contents":" 编辑 MAC 电脑环境\nvi ~/.bash_profile 增加 2 行\nexport GO111MODULE=on\nexport GOPROXY=https://goproxy.cn 使配置生效\nsouce ~/.bash_profile  ","date":"2020-01-03T23:40:58Z","permalink":"https://www.johnyn.com/2020/01/03/%E5%BC%80%E5%90%AFgomod%E9%85%8D%E7%BD%AEgoproxy/","section":"post","tags":"go proxy","title":"开启gomod,配置goproxy"},{"categories":null,"contents":"  pcm 转 wav\nsystem(\u0026ldquo;sox -t raw -c 1 -s -b 16 -r 16000 $pcmpath -c 1 -s -r 16000 $wavpath\u0026rdquo;, $return);\n  wav 转 wav\nsystem(\u0026ldquo;ffmpeg -i $sourcepath -acodec pcm_s16le -ac 1 -ar 16000 $wavpath\u0026rdquo;, $return);\n  mp3 转 wav\nsystem(\u0026ldquo;sox \u0026quot; . $wavpatht . \u0026quot; -r 16000 -c 1 \u0026quot; . $wavpath, $return);\n  m4a 转 wav\nsystem(\u0026ldquo;ffmpeg -i $pcmpath -acodec pcm_s16le -ac 1 -ar 16000 $wavpath\u0026rdquo;, $return);\n  ","date":"2019-06-20T16:16:05Z","permalink":"https://www.johnyn.com/2019/06/20/4%E7%A7%8D%E9%9F%B3%E9%A2%91%E6%A0%BC%E5%BC%8F%E8%BD%AC%E5%8D%95%E5%A3%B0%E9%81%93wav.md/","section":"post","tags":["sox","ffmpeg","mp3","pcm","m4a","wav"],"title":"4种音频格式转单声道wav.md"},{"categories":null,"contents":"在 mac 打包，在 linux 运行 CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go\nGolang 支持在一个平台下生成另一个平台可执行程序的交叉编译功能。   Mac 下编译 Linux 平台的 64 位可执行程序：\nCGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build test.go\n  打包并指定输出二进制文件名\nCGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o run_some_script main.go\n   Mac 下编译 Windows 平台的 64 位可执行程序\nCGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go  Linux 下编译 Mac, Windows 平台的 64 位可执行程序： CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build test.go\nCGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go\nWindows 下编译 Mac, Linux 平台的 64 位可执行程序： SET CGO_ENABLED=0SET GOOS=darwin3 SET GOARCH=amd64 go build test.go\nSET CGO_ENABLED=0 SET GOOS=linux SET GOARCH=amd64 go build test.go\n 注：如果编译 web 等工程项目，直接 cd 到工程目录下直接执行以上命令\n  GOOS：目标可执行程序运行操作系统，支持 darwin，freebsd，linux，windows\n  GOARCH：目标可执行程序操作系统构架，包括 386，amd64，arm\n  Golang version 1.5 以前版本在首次交叉编译时还需要配置交叉编译环境： CGO_ENABLED=0 GOOS=linux GOARCH=amd64 ./make.bash CGO_ENABLED=0 GOOS=windows GOARCH=amd64 ./make.bash\n ","date":"2019-02-03T23:40:58Z","permalink":"https://www.johnyn.com/2019/02/03/%E5%9C%A8mac%E4%B8%8A%E6%89%93%E5%8C%85/","section":"post","tags":null,"title":"在mac上打包"},{"categories":null,"contents":" 假设mysql有一个article表，字段:id,title,content,author,time(int类型),comment_count。同时Elasticsearch有个索引article和mysql的字段相同\n 查看 article 内容 按照 time 降序排列，从 0 开始显示 20\n类似 mysql 的 sql 语句:\nselect*fromarticleorderbytimedesclimit0,20; kibana\n GET article/_search { \u0026#34;query\u0026#34;: { \u0026#34;match_all\u0026#34;: {} }, \u0026#34;sort\u0026#34;: [ { \u0026#34;time\u0026#34;: { \u0026#34;order\u0026#34;: \u0026#34;desc\u0026#34; } } ], \u0026#34;size\u0026#34;: 20, \u0026#34;from\u0026#34;: 0 } 查找加入条件 类似 mysql 语句：\nselect*fromarticlewheretime\u0026gt;1589252400andauthor=\u0026#39;john\u0026#39;orderbytimeasclimit20; kibana\n GET article/_search { \u0026#34;size\u0026#34;: 20, \u0026#34;sort\u0026#34;: [ { \u0026#34;time\u0026#34;: { \u0026#34;order\u0026#34;: \u0026#34;asc\u0026#34; } } ], \u0026#34;query\u0026#34;: { \u0026#34;bool\u0026#34;: { \u0026#34;filter\u0026#34;: { \u0026#34;bool\u0026#34;: { \u0026#34;must\u0026#34;:[ { \u0026#34;range\u0026#34;:{ \u0026#34;time\u0026#34;:{ \u0026#34;gt\u0026#34;:1589252400 } } }, { \u0026#34;term\u0026#34;:{ \u0026#34;author\u0026#34;:\u0026#34;john\u0026#34; } } ] } } } } } or 查询 类似 mysql 语句：\nselect*fromarticlewhereauthor=\u0026#39;lucy\u0026#39;orauthor=\u0026#39;john\u0026#39;; kibana\n GET article/_search { \u0026#34;query\u0026#34;: { \u0026#34;bool\u0026#34;: { \u0026#34;filter\u0026#34;: { \u0026#34;bool\u0026#34;: { \u0026#34;should\u0026#34;:[ { \u0026#34;term\u0026#34;:{ \u0026#34;author\u0026#34;:\u0026#34;john\u0026#34; } }, { \u0026#34;term\u0026#34;:{ \u0026#34;author\u0026#34;:\u0026#34;lucy\u0026#34; } } ] } } } } } 聚合查询  按照天聚合查询每天评论数最大的\n类似 mysql 语句：  SELECTFROM_UNIXTIME(time,\u0026#39;%Y-%m-%d\u0026#39;)asdate,MAX(comment_number)asmaxFROM`article`GROUPBYFROM_UNIXTIME(time,\u0026#39;%Y-%m-%d\u0026#39;)ORDERBYdate; kibana\n GET article/_search { \u0026#34;query\u0026#34;: { }, \u0026#34;aggs\u0026#34;:{ \u0026#34;aggs\u0026#34;:{ \u0026#34;date_histogram\u0026#34;:{ \u0026#34;field\u0026#34;:\u0026#34;time\u0026#34;, \u0026#34;interval\u0026#34;:\u0026#34;1d\u0026#34;, \u0026#34;format\u0026#34;:\u0026#34;yyyy-MM-dd\u0026#34;, \u0026#34;time_zone\u0026#34;:\u0026#34;Asia/Shanghai\u0026#34;, \u0026#34;script\u0026#34;:{ \u0026#34;inline\u0026#34;:\u0026#34;doc[\u0026#39;time\u0026#39;].value * 1000\u0026#34;, \u0026#34;lang\u0026#34;:\u0026#34;painless\u0026#34; }, \u0026#34;min_doc_count\u0026#34;:0 }, \u0026#34;aggs\u0026#34;:{ \u0026#34;avg\u0026#34;:{ \u0026#34;max\u0026#34; : { \u0026#34;field\u0026#34; : \u0026#34;comment_number\u0026#34; } } } } } } 按照 author 统计每个人写的文章平均评论数量\n类似 mysql 语句：  selectauthor,AVG(comment_number)fromarticlegroupbyauthor kibana\n GET article/_search { \u0026#34;query\u0026#34;: { }, \u0026#34;aggs\u0026#34;: { \u0026#34;aggs\u0026#34;: { \u0026#34;terms\u0026#34;:{ \u0026#34;field\u0026#34;:\u0026#34;author\u0026#34;, \u0026#34;size\u0026#34;:999 }, \u0026#34;aggs\u0026#34;:{ \u0026#34;aggs\u0026#34;:{ \u0026#34;avg\u0026#34;: { \u0026#34;field\u0026#34;: \u0026#34;comment_number\u0026#34; } } } } } } 按照时间统计 author 的数量\n类似 mysql 语句：  SELECTFROM_UNIXTIME(time,\u0026#39;%Y-%m-%d\u0026#39;)asdate,count(DISTINCTauthor)ascountFROM`article`GROUPBYFROM_UNIXTIME(time,\u0026#39;%Y-%m-%d\u0026#39;)ORDERBYdate; kibana\n GET article/_search { \u0026#34;query\u0026#34;: { }, \u0026#34;aggs\u0026#34;:{ \u0026#34;aggs\u0026#34;:{ \u0026#34;date_histogram\u0026#34;:{ \u0026#34;field\u0026#34;:\u0026#34;time\u0026#34;, \u0026#34;interval\u0026#34;:\u0026#34;1d\u0026#34;, \u0026#34;format\u0026#34;:\u0026#34;yyyy-MM-dd\u0026#34;, \u0026#34;time_zone\u0026#34;:\u0026#34;Asia/Shanghai\u0026#34;, \u0026#34;script\u0026#34;:{\u0026#34;source\u0026#34;:\u0026#34;doc[\u0026#39;time\u0026#39;].value * 1000\u0026#34;,\u0026#34;lang\u0026#34;:\u0026#34;painless\u0026#34;}, \u0026#34;min_doc_count\u0026#34;:0 }, \u0026#34;aggs\u0026#34;:{ \u0026#34;distinct\u0026#34;:{ \u0026#34;cardinality\u0026#34;:{ \u0026#34;field\u0026#34;:\u0026#34;author\u0026#34;, \u0026#34;precision_threshold\u0026#34;:40000 } } } } } } ","date":"2018-01-02T23:40:58Z","permalink":"https://www.johnyn.com/2018/01/02/elasticsearch%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/","section":"post","tags":"Elasticsearch","title":"Elasticsearch查询语句"},{"categories":null,"contents":"查看所有索引 GET _cat/indices 创建索引 article POST article/article/_mapping { \u0026#34;article\u0026#34;: { \u0026#34;properties\u0026#34;: { \u0026#34;content\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;analyzer\u0026#34;: \u0026#34;ngram_analyzer\u0026#34; }, \u0026#34;title\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;analyzer\u0026#34;: \u0026#34;ngram_analyzer\u0026#34; }, \u0026#34;time\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;date\u0026#34; }, \u0026#34;author\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34; }, } } } 查看 article 的 mapping GET article/article/_mapping 删除索引 article 数据 POST article/article/_delete_by_query { \u0026#34;query\u0026#34;: { \u0026#34;match_all\u0026#34;: {} } } 删除索引 article DELETE article 复制索引 article 到 article_new POST _reindex { \u0026#34;conflicts\u0026#34;: \u0026#34;proceed\u0026#34;, \u0026#34;source\u0026#34;: { \u0026#34;index\u0026#34;: \u0026#34;article\u0026#34;, \u0026#34;sort\u0026#34;: { \u0026#34;time\u0026#34;: \u0026#34;desc\u0026#34; } }, \u0026#34;dest\u0026#34;: { \u0026#34;index\u0026#34;: \u0026#34;article_new\u0026#34;, \u0026#34;op_type\u0026#34;: \u0026#34;create\u0026#34; } } ","date":"2018-01-02T23:40:58Z","permalink":"https://www.johnyn.com/2018/01/02/kibana%E5%AF%B9%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/","section":"post","tags":"Elasticsearch","title":"kibana对索引相关操作"},{"categories":null,"contents":"安装 docker yum install -y yum-utils\nyum-config-manager \u0026ndash;add-repo https://download.docker.com/linux/centos/docker-ce.repo yum install docker-ce\n 启动 docker  service docker start\n 设置 docker 开机启动  systemctl enable docker\ndocker 迁移目录  停止 docker 服务\nsystemctl stop docker 编辑 dameon.json\nvi /etc/docker/daemon.json 增加如下内容（/home 是空间足够）  { \u0026#34;graph\u0026#34;: \u0026#34;/home/docker\u0026#34; } 移动 docker 默认目录到目标目录\nmv /var/lib/docker/* /home/docker/ 重新加载\nsystemctl daemon-reload 启动 docker 服务\nsystemctl start docker 查看 docker info，看目录是否修改成功\ndocker info  docker 迁移目录  停止 docker 服务\nsystemctl stop docker 编辑 dameon.json\nvi /etc/docker/daemon.json 增加如下内容（/home 是空间足够）  { \u0026#34;graph\u0026#34;: \u0026#34;/home/docker\u0026#34; } 移动 docker 默认目录到目标目录\nmv /var/lib/docker/* /home/docker/ 重新加载\nsystemctl daemon-reload 启动 docker 服务\nsystemctl start docker 查看 docker info，看目录是否修改成功\ndocker info  修改现有容器的目录映射或端口  停止 docker 服务\nsystemctl stop docker 查看 docker 目录\ndf -lh 进入容器目录\ncd /disk01/docker/containers/容器 id\u0026hellip;.. 修改以下 2 个配置文件\nvi hostconfig.json\nvi config.v2.json 启动 docker 服务\nsystemctl start docker 启动容器，看端口映射和目录是否修改成功 docker start 容器 id  ","date":"2017-12-02T23:40:58Z","permalink":"https://www.johnyn.com/2017/12/02/centos%E5%AE%89%E8%A3%85docker%E4%BB%A5%E5%8F%8A%E8%BF%9B%E9%98%B6/","section":"post","tags":"docker","title":"centOS安装docker以及进阶"},{"categories":null,"contents":" docker安装nginx镜像 docker pull nginx 主机新建2个目录并添加index.html /home/wwwroot/test1/index.html /home/wwwroot/test2/index.html  新建2个容器 docker run \u0026ndash;name nginx-test1 -d -p 8081:80 -v /home/wwwroot/test1:/usr/share/nginx/html nginx docker run \u0026ndash;name nginx-test2 -d -p 8082:80 -v /home/wwwroot/test2:/usr/share/nginx/html nginx 修改配置 vim /usr/local/nginx/conf/nginx.conf 在http{}添加  upstream ngtest { server 127.0.0.1:8081 weight=1; server 127.0.0.1:8082 weight=2; } 在server{}添加\nlocation / { root /usr/share/nginx/html; index index.html; proxy_pass http://ngtest; } 主机重启nginx\n","date":"2017-09-09T15:48:44Z","permalink":"https://www.johnyn.com/2017/09/09/nginx%E5%92%8Cdocker%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/","section":"post","tags":"docker nginx","title":"nginx和docker负载均衡"},{"categories":null,"contents":"系统 linuix-ubuntu  安装 docker apt install docker 创建 ubuntu 镜像 docker pull ubuntu 运行容器 docker run -p 80:80 -v /var/www:/var/www -d ubuntu 进入容器 docker exec -it ubuntu /bin/bash 查看镜像 docker images 导出容器 docker ps -a docker export d66 \u0026gt; ubuntu.tar 导入容器 cat ubuntu.tar | docker import - ubuntu:latest docker run -d -v /data/wwwroot:/home/wwwroot -p 10022:22 -p 13306:3306 -p 443:443 -p 80:80 \u0026ndash;name ubuntu ubuntu /sbin/sshd -D  ","date":"2017-09-02T23:40:58Z","permalink":"https://www.johnyn.com/2017/09/02/docker%E5%85%A5%E9%97%A8/","section":"post","tags":"docker","title":"docker入门"},{"categories":null,"contents":"在http{}添加 http{ ... gzip on; gzip_min_length 1k; gzip_buffers 4 16k; gzip_http_version 1.1; gzip_comp_level 2; gzip_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml application/xml+rss; gzip_vary on; gzip_proxied expired no-cache no-store private auth; gzip_disable \u0026#34;MSIE [1-6]\\.\u0026#34;; } ","date":"2017-07-29T11:48:44Z","permalink":"https://www.johnyn.com/2017/07/29/nginx%E7%9A%84gzip%E8%AE%BE%E7%BD%AE/","section":"post","tags":null,"title":"nginx的gzip设置"},{"categories":null,"contents":" 创建mongodb数据存放的文件夹  mkdir -p /mongodata/test/db27010 mkdir -p /mongodata/test/db27011 mkdir -p /mongodata/test/db27012\n启动27010主  在启动命令中加入 master,该mongo服务即可作为主。 mongod \u0026ndash;dbpath /mongodata/test/db27010 \u0026ndash;port 27010 \u0026ndash;master \u0026ndash;logpath /mongodata/test/db27010/log.txt \u0026ndash;fork\n启动27011、27012从  添加参数 \u0026ndash;slave 作为从,通过\u0026ndash;source localhost:27010来指定主的位置。 mongod \u0026ndash;dbpath /mongodata/test/db27011 \u0026ndash;port 27011 \u0026ndash;slave \u0026ndash;source localhost:27010 \u0026ndash;logpath /mongodata/test/db27011/log.txt \u0026ndash;fork mongod \u0026ndash;dbpath /mongodata/test/db27012 \u0026ndash;port 27012 \u0026ndash;slave \u0026ndash;source localhost:27010 \u0026ndash;logpath /mongodata/test/db27012/log.txt \u0026ndash;fork\n./bin/mongo \u0026ndash;port 27010 use admin db.system.users.find(); db.user.insert({\u0026lsquo;name\u0026rsquo;:\u0026lsquo;root\u0026rsquo;,\u0026lsquo;password\u0026rsquo;:\u0026lsquo;root\u0026rsquo;,roles:[{role:\u0026lsquo;root\u0026rsquo;,db:\u0026lsquo;admin\u0026rsquo;}]});\n./bin/mongo \u0026ndash;port 27011 use user; rs.slaveOk(); db.user.find();\napt install php-dev php-pecl pecl install mongodb\necho \u0026#34;extension=mongodb.so\u0026#34; \u0026gt;\u0026gt; `php --ini | grep \u0026#34;Loaded Configuration\u0026#34; | sed -e \u0026#34;s|.*:\\s*||\u0026#34;` ","date":"2017-06-12T11:48:44Z","permalink":"https://www.johnyn.com/2017/06/12/mongodb%E4%B8%BB%E4%BB%8E/","section":"post","tags":"mongodb","title":"mongodb主从"},{"categories":null,"contents":"重设mysql密码 wget http://soft.vpser.net/lnmp/ext/reset_mysql_root_password.sh\nsh reset_mysql_root_password.sh\nsudo ln -s 源文件 目标文件 //软连接\ngit fetch origin master //远程master下载最新到本地master git log -p master..origin/master //比较差别 git merge origin/master //合并 git pull origin master //远程合并到本地 mongoclient(host,username,paddword,port,array(slave-ok:true))\n安装composer curl -sS https://getcomposer.org/installer | php mv composer.phar /usr/local/bin/composer\n安装lnmp wget -c http://soft.vpser.net/lnmp/lnmp1.4.tar.gz \u0026amp;\u0026amp; tar zxf lnmp1.4.tar.gz \u0026amp;\u0026amp; cd lnmp1.4 \u0026amp;\u0026amp; ./install.sh lnmp\ntika wget http://apache.fayea.com/tika/tika-app-1.16.jar java -jar tika-app-1.16.jar \u0026ndash;html 基本信息.docx\n解压与压缩 xz -d *.tar.sz tar -xvf *.tar\ntar -zcvf *.tar.gz /var/aaa tar -zxvf *.tar.gz\nunzip *.zip unzip -v *.zip //查看目录但不解压\nzip *.zip /var/aaa\n递归创建目录456 mkdir /var/www/123/456 -pv\nfind find . -name \u0026ldquo;\u0026rdquo; -type f -size 0c //查找大小为0文件 find . -name \u0026ldquo;\u0026rdquo; -type f -size 0c | xargs -n 1 rm -f //删除空文件 find . -name \u0026ldquo;*\u0026rdquo; -type f -size 1024c | xargs -n 1 rm -f //删除指定大小 find -type d -empty //找出空文件夹 find . -name \u0026ldquo;shuaige.txt\u0026rdquo; -exec ls {} ; //列出搜索到的文件 find . -name \u0026ldquo;shuaige.txt\u0026rdquo; -exec rm -f {} ; //批量删除 find . -name \u0026ldquo;shuaige.txt\u0026rdquo; -ok rm -rf {} ; //删除前有提示 find . -name \u0026ldquo;test\u0026rdquo; -type d -exec rm -rf {} ; //删除当前目录下面所有 test 文件夹下面的文件 find . -name \u0026lsquo;.svn\u0026rsquo; -exec rm -rf {} ; //删除文件夹下面的所有的.svn文件\n","date":"2017-05-29T11:48:44Z","permalink":"https://www.johnyn.com/2017/05/29/linux%E5%AD%A6%E4%B9%A0%E5%91%BD%E4%BB%A42/","section":"post","tags":null,"title":"linux学习命令2"},{"categories":null,"contents":"nginx -t 查看nginx启动失败原因 unknown directive “if(!-e” if和(直接有空格\n 匹配nginx需要交给php-fpm执行的URI，先要允许pathinfo格式的URL能够被匹配到 所以要去掉$ nginx文档中的匹配规则为：^(.+.php)(.*)$ 还有~ .php这种写法 和 ~ .php($|/)这种写法 都是差不多意思没啥严格区别 唯一区别就是有多个匹配php的location的话需要留意权重差异\n location ~ ^(.+\\.php)(.*)$ { root /var/www/www.jjonline.cn/wwwRoot; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; ##增加 fastcgi_split_path_info指令，将URI匹配成PHP脚本的URI和pathinfo两个变量 ##即$fastcgi_script_name 和$fastcgi_path_info fastcgi_split_path_info ^(.+\\.php)(.*)$; ##PHP中要能读取到pathinfo这个变量 ##就要通过fastcgi_param指令将fastcgi_split_path_info指令匹配到的pathinfo部分赋值给PATH_INFO ##这样PHP中$_SERVER[\u0026#39;PATH_INFO\u0026#39;]才会存在值 fastcgi_param PATH_INFO $fastcgi_path_info; ##在将这个请求的URI匹配完毕后，检查这个绝对地址的PHP脚本文件是否存在 ##如果这个PHP脚本文件不存在就不用交给php-fpm来执行了 ##否者页面将出现由php-fpm返回的:`File not found.`的提示 if (!-e $document_root$fastcgi_script_name) { ##此处直接返回404错误 ##你也可以rewrite 到新地址去，然后break; return 404; } fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } ","date":"2017-05-16T11:48:44Z","permalink":"https://www.johnyn.com/2017/05/16/nginx%E7%9A%84pathinfo/","section":"post","tags":"nginx pathinfo","title":"nginx的pathinfo"},{"categories":null,"contents":"centos安装 apache php mysql yum install httpd yum install php php-mysql yum install mysql mysql-server vi /etc/httpd/conf/httpd.conf /etc/init.d/httpd start /etc/init.d/mysqld start\ncentos安装ssdb yum install wget wget \u0026ndash;no-check-certificate https://github.com/ideawu/ssdb/archive/master.zip yum install unzip zip umzip master.zip cd ssdb-master yum install autoconf yum install g++ gcc+ gcc-c++ make make install /usr/local/ssdb/ssdb-server -d /usr/local/ssdb/ssdb.confps aux | grep ssdb\n如果修改apache的端口需要改selinux配置 vi /etc/selinux/config 将SELINUX=enforcing改为SELINUX=disabled\nchkconfig mysqld on chkconfig httpd on\n/var/www/html/ssdb-master/tools/ssdb.sh /etc/init.d/ssdb /etc/init.d/ssdb /etc/init.d\nvi ssdb 修改ssdb.conf路径 chkconfig \u0026ndash;add ssdb chkconfig ssdb on\nwindows 远程连接windwos 2003 服务器 下载php-5.4.22-nts-Win32-VC9-x86.zip 下载httpd-2.2.25-win32-x86-no_ssl.msi 打开控制面板-\u0026gt;添加或删除windows组件-\u0026gt;应用程序服务器-\u0026gt;关闭asp.net和iis\n打开“本地连接状态”对话框，点击“属性”按钮。 在弹出的“本地连接属性”对话框中点击“高级”选项卡。\n在弹出的“高级设置”对话框中的列外选项卡中，\n添加10880，单击“添加端口”按钮。 名称和端口都写10880 修改apache配置\n","date":"2017-03-02T23:40:58Z","permalink":"https://www.johnyn.com/2017/03/02/centos%E5%92%8Cwindows-server2003%E6%90%AD%E5%BB%BAapache-php-ssdb%E7%8E%AF%E5%A2%83/","section":"post","tags":["httpd","php","mysql","windows2003"],"title":"Centos和windows server2003搭建apache php ssdb环境"},{"categories":null,"contents":"https://www.mls-software.com/opensshd.html 下载安装 win+r 打开cmd\nssh -qTfnN -D port user@host\n浏览器代理 socks V5 127.0.0.1:port\n","date":"2017-03-02T23:40:58Z","permalink":"https://www.johnyn.com/2017/03/02/%E4%BB%A3%E7%90%86/","section":"post","tags":"ssh","title":"代理"},{"categories":null,"contents":"做个记录，学习reactjs starting！！！\nnpm run build 生成bundle.js\nnpm start\n","date":"2016-07-10T23:40:58Z","permalink":"https://www.johnyn.com/2016/07/10/reactjs%E8%AE%B0%E5%BD%95/","section":"post","tags":null,"title":"reactjs记录"},{"categories":null,"contents":" apt-get install siege siege http://www.baidu.com -d1 -r10 -c1 -d1 //延迟1秒 -r10 //10次 -c1 //并发数 Transactions: 10 hits //访问次数 Availability: 100.00 % //成功次数 Elapsed time: 6.92 secs //测试用时 Data transferred: 0.25 MB //传输数据量 Response time: 0.09 secs //平均响应时间 Transaction rate: 1.45 trans/sec //每秒事务处理量 Throughput: 0.04 MB/sec //吞吐量 Concurrency: 0.13 //并发用户数 Successful transactions: 10 //成功传输次数 Failed transactions: 0 //失败传输次数 Longest transaction: 0.10 //最长响应时间 Shortest transaction: 0.08 //最短响应时间 ","date":"2016-07-10T23:40:58Z","permalink":"https://www.johnyn.com/2016/07/10/siege%E5%B9%B6%E5%8F%91/","section":"post","tags":null,"title":"siege并发"},{"categories":null,"contents":"新建github pages 1.注册github账号\n2.verify邮箱，不然访问github page 404\n3.新建项目 名称 用户名.github.io 4.在master新建index.html 输入内容 访问 用户名.github.io\n安装hexo 1.安装nodejs 访问nodejs.org下载对应版本 2.安装git 访问git-scm.com/download下载（ 建议使用迅雷等下载工具） 3.进入nodejs安装目录新建一个文件夹，例如：hexo 4.win+r 输入cmd或者运行nodejs command 5cd hexo 目录 npm install -g hexo npm install hexo-server hexo init hexo generate/hexo g hexo server/hexo s 浏览器访问localhost:4000\ngit上传代码部署 运行git bash\ncd hexo目录 git clone https://github.com/用户名/用户名.github.io.git\n把hexo的public目录文件复制到用户名.github.io文件夹 git config \u0026ndash;global user.name \u0026ldquo;github用户名\u0026rdquo; git config \u0026ndash;global user.email \u0026ldquo;github邮箱\u0026rdquo; git add . git commit -m \u0026ldquo;first\u0026rdquo; git remote add origin https://github.com/用户名/用户名.github.io.git git push origin master\n绑定域名 百度云注册一个账号，登录后注册一个域名\n控制台-》产品服务-》域名服务-》域名管理 -》点击注册的域名右边的解析-》添加解析-\u0026gt;记录类型选择 CNAME -\u0026gt;记录值:用户名.github.io\n","date":"2016-04-26T11:48:44Z","permalink":"https://www.johnyn.com/2016/04/26/github-pages%E5%92%8Chexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","section":"post","tags":["github","pages","hexo","git","nodejs"],"title":"github pages和hexo 搭建博客"},{"categories":null,"contents":"npm config set registry https://registry.npm.taobal.org //设置源 npm config get registry//查看源\napidoc -i php/ -o doc/\nnpm install -g n n stable which node //查看node\n","date":"2016-04-22T11:48:44Z","permalink":"https://www.johnyn.com/2016/04/22/node%E7%9B%B8%E5%85%B3/","section":"post","tags":null,"title":"node相关"},{"categories":null,"contents":"","date":"2016-03-20T16:16:05Z","permalink":"https://www.johnyn.com/2016/03/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","section":"post","tags":"正则","title":"正则表达式"},{"categories":null,"contents":"远程拷贝文件 scp -r root@193.2.2.1:/var/www/html/demo /var/www/html\n","date":"2016-01-03T11:48:44Z","permalink":"https://www.johnyn.com/2016/01/03/linux%E5%91%BD%E4%BB%A4scp/","section":"post","tags":null,"title":"linux命令scp"},{"categories":null,"contents":" linux wget nodejs.tgz ls -ls /usr/nodejs/bin/node /usr/bin/node ls -ls /usr/nodejs/bin/npm /usr/bin/npm npm install -g ionic cordova ionic ionic start myapp tabs //创建tab cd myapp ionic setup sass ionic serve 在浏览器里运行 //android里运行 ionic platform add android ionic build android ionic run android ","date":"2015-07-29T11:48:44Z","permalink":"https://www.johnyn.com/2015/07/29/ionic%E5%88%9B%E5%BB%BAapp%E5%85%A5%E9%97%A8/","section":"post","tags":null,"title":"ionic创建app入门"},{"categories":null,"contents":"netstat -ant | grep $ip:80 | wc -l 80端口数量\n","date":"2015-07-28T11:48:44Z","permalink":"https://www.johnyn.com/2015/07/28/netstat%E5%91%BD%E4%BB%A4/","section":"post","tags":null,"title":"netstat命令"},{"categories":null,"contents":" 理念是根本 单一的服务目标 保持简单 保持轻量级 UI很重要 倾听用户的声音 了解用户行为  ","date":"2015-07-28T11:48:44Z","permalink":"https://www.johnyn.com/2015/07/28/%E5%BC%80%E5%8F%91app%E8%A6%81%E7%82%B9/","section":"post","tags":null,"title":"开发app要点"},{"categories":null,"contents":" 安装nmon：apt-get install nmon 生成10分钟的记录：nmon -s10 -c60 -f -m /var/www 把记录文件下载到windows上 访问https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Power%20Systems/page/nmon_analyser 下载 用excel打开下载的xlsm文件 点击Analyze nmon data按钮，打开下载的记录文件，生成之后保存 打开生成的excel  ","date":"2015-07-23T11:48:44Z","permalink":"https://www.johnyn.com/2015/07/23/nmon%E7%9B%91%E6%8E%A7linux/","section":"post","tags":null,"title":"nmon监控linux"},{"categories":null,"contents":"用vi(或nano等文本编辑器)打开 /etc/default/locale 文件\n将原来的配置内容修改为\nLANG=”en_US.UTF-8″\nLANGUAGE=”en_US:en”\n再在终端下运行：\nlocale-gen -en_US:en\n注销或重启后生效\n","date":"2015-07-15T11:48:44Z","permalink":"https://www.johnyn.com/2015/07/15/%E4%BF%AE%E6%94%B9linux%E9%BB%98%E8%AE%A4%E8%AF%AD%E8%A8%80/","section":"post","tags":null,"title":"修改linux默认语言"},{"categories":null,"contents":"apt-get install nginx php5-fpm\nvi /etc/nginx/sites-available/default\n修改如下\nlisten 80;\nroot /var/www/html;\nindex index.html index.htm index.php;\nlocation ~ .php$ {\ninclude fastcgi.conf;\nfastcgi_pass unix:/run/php/php7.0-fpm.sock; fastcgi_index index.php;\nfastcgi_intercept_errors on; include fastcgi_params;\n}\n保存\nps aux | grep -c php-fpm\n/etc/init.d/php-fpm restart\nservice nginx restart\nvi /var/www/html/phpinfo.php\necho phpinfo();\napt-get install mysql-server php5-mysql\nvi /etc/php5/fpm/php.ini\n修改extension_dir = “/usr/lib/php5/20090626+lfs”\nservice nginx restart\nservice php-fpm restart\nnginx启动失败： nginx -t查看配置文件是否出错\n","date":"2015-07-15T11:48:44Z","permalink":"https://www.johnyn.com/2015/07/15/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAnginx-php-mysql/","section":"post","tags":null,"title":"快速搭建nginx+php+mysql"},{"categories":null,"contents":"\u0026lt;?php header(\u0026#39;Content-type:text/html;charset=utf-8\u0026#39;); $conn = mysql_connect(\u0026#39;localhost\u0026#39;,\u0026#39;root\u0026#39;,\u0026#39;111111\u0026#39;); if(!$conn){ die(\u0026#39;\u0026#39;); } mysql_select_db(\u0026#39;imsl_media\u0026#39;,$conn); mysql_query(\u0026#39;set names utf8\u0026#39;); $res = mysql_query(\u0026#39;select * from imsl_singer limit 10\u0026#39;); while($row = mysql_fetch_assoc($res)){ var_dump($row); } //mongo \t$mongo = new mongo(\u0026#34;mongodb://root:111111@localhost:27017\u0026#34;); $db = $mongo-\u0026gt;user; $table = $db-\u0026gt;user_list; $sort[\u0026#39;time\u0026#39;] = 1; $a = $table-\u0026gt;find($where)-\u0026gt;sort($sort)-\u0026gt;limit(10)-\u0026gt;skip(10); //postgresql \t$pg = pg_connect(\u0026#39;host=localhost port=5443 dbname=imsl_media user=root password=bar\u0026#39;); $res = pg_query($pg,\u0026#39;select * from imsl_singer limit 10\u0026#39;); if(!$res){ die(\u0026#39;\u0026#39;); } if(pg_num_rows($res)){ while($row = pg_fetch_assoc($res)){ var_dump($row); } }else{ } ","date":"2015-06-03T11:48:44Z","permalink":"https://www.johnyn.com/2015/06/03/mysql-postgresql-mongodb%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C/","section":"post","tags":null,"title":"mysql postgresql mongodb连接操作"},{"categories":null,"contents":" 在内存使用效率上，如果使用简单的key-value存储，Memcached的内存利用率更高。而如果Redis采用hash结构来做key-value存储，由于其组合式的压缩，其内存利用率会高于Memcached。当然，这和你的应用场景和数据特性有关。 如果你对数据持久化和数据同步有所要求，那么推荐你选择Redis。因为这两个特性Memcached都不具备。即使你只是希望在升级或者重启系统后缓存数据不会丢失，选择Redis也是明智的。 当然，最后还得说到你的具体应用需求。Redis相比Memcached来说，拥有更多的数据结构，并支持更丰富的数据操作。通常在Memcached里，你需要将数据拿到客户端来进行类似的修改再set回去。这大大增加了网络IO的次数和数据体积。在Redis中，这些复杂的操作通常和一般的GET/SET一样高效。所以，如果你需要缓存能够支持更复杂的结构和操作，那么Redis会是不错的选择。\n 下载memcached wget http://memcached.org/files/memcached-1.4.24.tar.gz\ntar -zxvf memcached-1.4.24.tar.gz\nmv memcached-1.4.24 /usr/local/memcached\ncd /usr/local/memcached/\n./configure \u0026amp;\u0026amp; make \u0026amp;\u0026amp; make test \u0026amp;\u0026amp; sudo make install\n./memcached -d -m 128 -p 11211 -u root\n下载libmemcached wget http://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz\ntar -zxvf libmemcached-1.0.18.tar.gz\nmv libmemcached-1.0.18 /usr/local/libmemcached\ncd /usr/local/libmemcached/\n./configure\nmake \u0026amp;\u0026amp; make install\n安装php memcache扩展\nwget http://github.com/php-memcached-dev/php-memcached/archive/master.zip\nunzip master.zip\ncd php-memcached-master/\nphpize\n./configure\nmake \u0026amp;\u0026amp; make install\n修改php.ini\nvi /etc/php5/cli/php.ini\n增加一行 extension=memcached.so\n","date":"2015-06-02T11:48:44Z","permalink":"https://www.johnyn.com/2015/06/02/memcached%E5%AE%89%E8%A3%85/","section":"post","tags":null,"title":"memcached安装"},{"categories":null,"contents":"在某个文件中查找某一段内容 grep -F php 01.php\n在某个目录和子目录查找字符串出现的次数 grep -r \u0026lsquo;print\u0026rsquo; /var/www\n查看进程 ps -ef cd命令 切换用户目录 例如 /root\n倒引号里的会当做shell命令执行 echo \u0026ldquo;this dir is pwd\u0026rdquo;\n逻辑与\u0026amp;\u0026amp;吧2个命令连在一起 从左到右 命令1\u0026amp;\u0026amp;命令2 如果命令1执行不成功则命令2不执行 逻辑或||吧2个命令连在一起 从左到右 命令1||命令2 如果命令1执行不成功则执行命令2 如果命令1执行成功则不执行命令2\nll -lh du -lh\n","date":"2015-05-29T11:48:44Z","permalink":"https://www.johnyn.com/2015/05/29/linux%E5%AD%A6%E4%B9%A0%E5%91%BD%E4%BB%A41/","section":"post","tags":null,"title":"linux学习命令1"},{"categories":null,"contents":"下载：wget http://apache.fayea.com/lucene/solr/5.1.0/solr-5.1.0.zip\nunzip -q solr-5.1.0.zip\ncd solr-5.0.0.zip\n启动solr: bin/solr start -p 8983\n新建core name为：new_core\n复制/var/www/solr-5.1.0/server/solr/configsets/basic_configs/ 目录下的conf和lang 到/var/www/solr-5.1.0/server/solr/new_core\n打开浏览器localhost:8983 新建core\ndemo\n修改conf/schema.xml 在fields下添加\n \u0026lt;field name=\u0026quot;song_id\u0026quot; type=\u0026quot;string\u0026quot; indexed=\u0026quot;true\u0026quot; stored=\u0026quot;true\u0026quot; required=\u0026quot;true\u0026quot; /\u0026gt; \u0026lt;field name=\u0026quot;song_name\u0026quot; type=\u0026quot;text_general\u0026quot; indexed=\u0026quot;true\u0026quot; stored=\u0026quot;true\u0026quot; omitNorms=\u0026quot;true\u0026quot; termVectors=\u0026quot;true\u0026quot; /\u0026gt; \u0026lt;field name=\u0026quot;space_song_name\u0026quot; type=\u0026quot;text_general\u0026quot; indexed=\u0026quot;true\u0026quot; stored=\u0026quot;true\u0026quot; omitNorms=\u0026quot;true\u0026quot; termVectors=\u0026quot;true\u0026quot; /\u0026gt; \u0026lt;field name=\u0026quot;hot_num\u0026quot; type=\u0026quot;long\u0026quot; indexed=\u0026quot;true\u0026quot; stored=\u0026quot;true\u0026quot; omitNorms=\u0026quot;true\u0026quot; termVectors=\u0026quot;true\u0026quot; /\u0026gt; 把\u0026lt;uniqueKey\u0026gt;id\u0026lt;/uniqueKey\u0026gt; 改成 \u0026lt;uniqueKey\u0026gt;song_id\u0026lt;/uniqueKey\u0026gt; \u0026lt;defaultSearchField\u0026gt;song_name\u0026lt;/defaultSearchField\u0026gt;  ","date":"2015-05-13T11:48:44Z","permalink":"https://www.johnyn.com/2015/05/13/solr%E4%BD%BF%E7%94%A8/","section":"post","tags":null,"title":"solr使用"},{"categories":null,"contents":" var reg = /\\/|\\~|\\!|\\@|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\_|\\+|\\{|\\}|\\:|\\\u0026lt;|\\\u0026gt;|\\?|\\[|\\]|\\,|\\.|\\/|\\;|\\’|\\`|\\-|\\=|\\\\\\|\\|/; var res = reg.test(keyword);  ","date":"2015-05-05T11:48:44Z","permalink":"https://www.johnyn.com/2015/05/05/js%E6%AD%A3%E5%88%99%E8%BF%87%E6%BB%A4/","section":"post","tags":null,"title":"js正则过滤"},{"categories":null,"contents":"例子： 每分钟执行10.php 并把输出结果输出到showtime.log crontab -e */1 * * * * php /var/www/html/10.php \u0026raquo; /var/www/html/showtime.log\n","date":"2015-04-22T11:48:44Z","permalink":"https://www.johnyn.com/2015/04/22/unbutu%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8C/","section":"post","tags":null,"title":"unbutu定时执行"},{"categories":null,"contents":"\u0026lt;?php function mb_unserialize($serial_str) { $serial_str= preg_replace(‘!s:(\\d+):”(.*?)”;!se’, “‘s:’.strlen(‘$2′).\u0026#39;:\\”$2\\”;\u0026#39;”, $serial_str ); $serial_str= str_replace(“\\r”, “”, $serial_str); return unserialize($serial_str); } ","date":"2015-04-22T11:48:44Z","permalink":"https://www.johnyn.com/2015/04/22/unserialize%E8%BF%94%E5%9B%9Efalse/","section":"post","tags":null,"title":"unserialize返回false"},{"categories":null,"contents":" function check_input($value) { // 去除斜杠 if (get_magic_quotes_gpc()) { $value = stripslashes($value); } // 如果不是数字则加引号 if (!is_numeric($value)) { $value = \u0026quot;'\u0026quot; . mysql_real_escape_string($value) . \u0026quot;'\u0026quot;; } return $value; } $con = mysql_connect(\u0026quot;localhost\u0026quot;, \u0026quot;hello\u0026quot;, \u0026quot;321\u0026quot;); if (!$con) { die('Could not connect: ' . mysql_error()); } // 进行安全的 SQL $user = check_input($_POST['user']); $pwd = check_input($_POST['pwd']); $sql = \u0026quot;SELECT * FROM users WHERE user=$user AND password=$pwd\u0026quot;; mysql_query($sql); mysql_close($con);  ","date":"2015-03-03T11:48:44Z","permalink":"https://www.johnyn.com/2015/03/03/%E9%A2%84%E9%98%B2%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%BB%E5%87%BB%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%81%9A%E6%B3%95/","section":"post","tags":null,"title":"预防数据库攻击的正确做法"},{"categories":null,"contents":"计算机主机网关的作用是什么？\n假设你的名字叫小不点，你住在一个大院子里，你的邻居有很多小伙伴，在门口传达室还有个看大门的李大爷，李大爷就是你的网关。当你想跟院子里的某个小伙伴玩，只要你在院子里大喊一声他的名字，他听到了就会回应你，并且跑出来跟你玩。\n但是你不被允许走出大门，你想与外界发生的一切联系，都必须由门口的李大爷（网关）用电话帮助你联系。假如你想找你的同学小明聊天，小明家住在很远的另外一 个院子里，他家的院子里也有一个看门的王大爷（小明的网关）。但是你不知道小明家的电话号码，不过你的班主任老师有一份你们班全体同学的名单和电话号码对 照表，你老师就是你的DNS服务器。于是你在家里拨通了门口李大爷的电话，有了下面的对话：\n小不点：李大爷，我想找班主任查一下小明的电话号码行吗？\n李大爷：好，你等着。（接着李大爷给你的班主任挂了一个电话，问清楚了小明的电话）问到了，他家的号码是211.99.99.99\n小不点：太好了！李大爷，我想找小明，你再帮我联系一下小明吧。\n李大爷：没问题。（接着李大爷向电话局发出了请求接通小明家电话的请求，最后一关当然是被转接到了小明家那个院子的王大爷那里，然后王大爷把电话给转到小明家）\n就这样你和小明取得了联系。\n至于DHCP服务器嘛，可以这样比喻：\n你家院子里的居民越来越多了，传达室李大爷那里的电话交换机已经不能满足这么多居民的需求了，所以只好采用了一种新技术叫做DHCP，居民们开机的时候随机得到一个电话号码，每一次得到的号码都可能会不同\n你家门口的李大爷：就是你的网关\n你的班主任：就是你的DNS服务器\n传达室的电话交换机：就是你的DHCP服务器\n同上，李大爷和王大爷之间的对话就叫做路由。\n另：如果还有个小朋友叫做小暗，他住的院子看门的是孙大爷，因为小暗的院子刚盖好，孙大爷刚来不久，他没有李大爷和王大爷办公室的电话（李大爷和王大爷当然也没有他的电话），这时会有两种情况：\n1、居委会的赵大妈告诉了孙大爷关于李、王两位大爷的电话（同时赵大妈也告诉了李王关于孙的电话），这就叫静态设定路由\n2、赵大妈病了，孙大爷自己到处打电话，见人就说：“我是小暗他们院子管电话的”，结果被李、王二位听到了，就记在了他们的通讯录上，然后李、王就给孙大爷回了个电话说：“我是小明（小不点）他们院子管电话的”，这就叫动态设定路由\n然后有一天小不点要找小暗，结果自然是小不点给李大爷打电话说：“大爷，我找小暗”（这里省略了李大爷去查小暗电话的过程，假设他知道小暗的电话），李大爷 一找通讯录：“哦，小暗的院子的电话是孙大爷管着的，要找小暗自然先要通知孙大爷，我可以通知王大爷让他去找孙大爷，也可以自己直接找孙，那当然是自己直 接找孙方便了”，于是李大爷给孙大爷打了电话，然后孙大爷又把电话转到了小暗家。\n这里李大爷的通讯录叫做路由表。\n李大爷选择是自己直接找孙大爷还是让王大爷帮忙转接叫做路由选择。\n李 大爷之所以选择直接找孙大爷是有依据的因为他直接找孙大爷就能一步到位，如果要王大爷转接就需要两步才能完成，这里的“步”叫做“跳数”，李大爷的选择遵 循的是最少步骤（跳数）原则（如果他不遵守这个原则，小不点可能就会多等些时间才能找到小暗，最终结果可能导致李大爷因工作不力被炒鱿鱼，这叫做“延时太 长，选路原则不合理，换了一个路由器”）\n当然，事情总是变化的，小不点和小明吵架了，这些天小不点老是给小暗打电话，小明心里想：“操，他是不是在说我坏话啊？”于是小明决定偷听小不点和小暗的通话，但是他又不能出院子，怎么办呢？小明做了这样一个决定：\n首先他告诉自己院里管电话的王大爷说：“你给李大爷打个电话说小暗搬到咱们院子了以后凡是打给他的电话我来接”，王大爷没反映过来（毕竟年纪大了啊！）就给李大爷打了电话，说：“现在我来管理小暗的电话了，孙已经不管了”，结果李大爷就把他的通讯录改了，这叫做路由欺骗。\n以后小不点再找小暗，李大爷就转给王大爷了（其实应该转给孙大爷的），王大爷收到了这个电话就转给了小明（因为他之前已经和小明说好了），小明收到这个电话 就假装小暗和小不点通信。因为小明作贼心虚，害怕明天小不点和小暗见面后当面问他，于是通信断了之后，又自己以小不点的名义给小暗通了个电话复述了一遍刚 才的话，有这就叫数据窃听。\n再后来，小不点还是不断的和小暗联系，而冷落了小明，小明心里嘀咕啊：“我不能总是这样以小暗的身份和小不点通话啊，外一有一天露馅了怎么办！”于是他想了 一个更阴险的招数：“干脆我也不偷听你们的电话了，你小不点不是不给我打电话吗！那我让你也给小暗打不了，哼哼！”，他怎么做的呢？我们来看：\n他联系了一批狐朋狗友，和他们串通好，每天固定一个时间大家一起给小暗院子传达室打电话，内容什么都有，只要传达室的孙爷爷接电话，就会听到“打雷啦，下雨 收衣服啊！”、“人是人他妈生的，妖是妖他妈生的”、“你妈贵姓”等等，听的脑袋都大了，不听又不行，电话不停的响啊！终于有一天，孙爷爷忍不住了，大喊 一声：“我受不了拉！！！！”，于是上吊自杀了！\n这就是最简单的DDOS攻击，孙爷爷心理承受能力弱的现象叫做“数据报处理模块有BUG”，孙爷爷的自杀叫做“路由器瘫痪”。如果是我，就会微笑着和他们拉 家常，例如告诉他们“我早就听了天气预报，衣服10分钟前已经收好了”或者“那你妈是人还是妖”或者“和你奶奶一个姓”等等，我这种健全的心理叫做“健壮 的数据报处理，能够抵御任何攻击”。\n孙爷爷瘫了之后，小不点终于不再给小暗打电话了，因为无论他怎么打对方都是忙音，这种现象叫做“拒绝服务”，所以小明的做法还有一个名字叫做“拒绝服务攻击”。\n小明终于安静了几天，、…\n几天后，小明的院子来了一个美丽的女孩，名字叫做小丽，小明很喜欢她（小小年纪玩什么早恋！）可是小丽有个很帅的男朋友，小明干瞪眼没办法。当然这里还是要遵循上面的原则：小丽是不能出院子的。那个男的想泡小丽自然只能打电话，于是小明又蠢蠢欲动了：\n还记得王爷爷是院子的电话总管吗？他之所以能管理电话是因为他有一个通讯录，因为同一个院子可能有2个孩子都叫小明，靠名字无法区分，所以通讯录上每一行只有两项\n门牌电话\n一号门 1234567 （这个是小明的）\n二号门 7654321 （这个是小丽的）\n王爷爷记性不好，但这总不会错了吧（同一个院子不会有2个“二号门”吧）？每次打电话人家都要说出要找的电话号码，然后通过通讯录去院子里面敲门，比如人家 说我找“1234567”，于是王爷爷一比较，哦，是一号门的，他就去敲一号门“听电话”，如果是找“7654321”，那他就找二号门“听电话”。\n这里的电话号码就是传说中的“IP地址”\n这里的门牌号就是传说中的网卡的’MAC‘地址（每一块网卡的MAC地址都是不一样的，这是网卡的制造商写死在网卡的芯片中的\n小明心里想“奶奶的，老子泡不到你也别想泡”，于是他打起了王爷爷通讯录的主意，经过细心的观察，周密的准备，他终于发现王爷爷有尿频的毛病（毕竟是老人啊…），终于在一个月黑风高的白天，王爷爷去上厕所了，小明偷偷的摸进传达室，小心翼翼的改了王爷爷的通讯录……\n过了几天，小丽的男朋友又给小丽打来了电话，对方报的电话是“7654321”，王爷爷一看通讯录，靠：\n门牌电话\n一号门 1234567 （这个是小明的）\n一号门 7654321 （注意：这个原来是小丽的，但是被小明改了）\n王爷爷不知道改了啊，于是就去找一号门的小明了，小明心里这个美啊，他以小丽父亲的口吻严厉的教训了那个男的和小丽之间不正当的男女关系，结果那个男的恭恭敬敬的挂了电话。当然小丽并不知道整个事情的发生…\n这里小明的行为叫做“ARP欺骗”（因为在实际的网络上是通过发送ARP数据包来实现的所以叫做“ARP欺骗”），王爷爷的通讯录叫做“ARP表”\n这里要注意：王爷爷现在有两个通讯录了，一个是记录每个院子传达室电话的本本，叫做“路由表”，一个是现在说的记录院子里面详细信息的本本，叫做“ARP表”。\n有句名言是“人们总是在追求完美的，尽管永远也做不到”（请记住这句话，因为这是一个大名人–也就是我，说的）\n王爷爷的制度中有一条是这么写的“每个月要重新检查一下门牌号和电话的对应本（也就是ARP表）”，这个动作叫做“刷新ARP表”每个月的时间限制叫做“刷 新ARP表的周期”。这样小明为了让那个男的永远不能找到小丽，之后每个月都要偷偷改一次那个通讯录，不过这样也是不得不做的事啊！\n补充一点，小明是很聪明的，如果通讯录（ARP表）被改成了这样：\n门牌（MAC）电话（IP）\n一号门 1234567 （这个是小明的）\n二号门 1234567 （注意：这个被小明改了但是他一时头晕改错了）\n就会是计算机就会弹出一个对话框提示“出现重复的IP地址”，最终会导致王爷爷不知所措，于是通知一号门和二号门，你们的电话重复了。这样小丽就知道有人在破坏她的好事，这个现象叫做“骗局被揭穿了”\n小不点知道了小明偷听他和小暗的电话，于是就和小暗约定好了密码。小不点在家里把要说的加密了之后告诉小暗。土豆－〉星期三，地瓜－〉请客，笨蛋－〉小不点家。于是小不点告诉小暗：土豆笨蛋地瓜。小明听了？？？不懂……郁闷了……这是加密。\n除 此之外，小丽也知道了小明改他家的电话号码了。于是王爷爷就登门一个一个把电话和门牌号记下来。并且藏起来不允许外人修改，只能自己有钥匙（密码）。这是 IP地址和MAC地址绑定。当有人改了电话号码的时候，就得找王爷爷改。麻烦是麻烦了，但是安全了。不过小明偷偷的把王爷爷的钥匙偷配了一把（盗窃密码成 功），于是他还可以修改。这样么，就这样了。\n","date":"2015-02-12T11:48:44Z","permalink":"https://www.johnyn.com/2015/02/12/%E7%BD%91%E5%85%B3%E7%9A%84%E8%A7%A3%E9%87%8A/","section":"post","tags":null,"title":"网关的解释"},{"categories":null,"contents":"function ToTencent(title,picUrl){ var _t = encodeURI(\u0026#34;【@xx：\u0026#34;+title+\u0026#34;】\u0026#34;); var _url = encodeURIComponent(document.location); var _appkey = encodeURI(\u0026#34;xx\u0026#34;);//你从腾讯获得的appkey  var _pic = encodeURI(picUrl);//（例如：var _pic=\u0026#39;图片url1|图片url2|图片url3....）  var _site = \u0026#39;\u0026#39;;//你的网站地址  var _u = \u0026#39;http://v.t.qq.com/share/share.php?url=\u0026#39;+_url+\u0026#39;\u0026amp;appkey=\u0026#39;+_appkey+\u0026#39;\u0026amp;site=\u0026#39;+_site+\u0026#39;\u0026amp;pic=\u0026#39;+_pic+\u0026#39;\u0026amp;title=\u0026#39;+_t; window.open( _u,\u0026#39;\u0026#39;, \u0026#39;width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\u0026#39; ); } function ToSina(title,picUrl){ var _t = encodeURI(\u0026#34;【@xx：\u0026#34;+title+\u0026#34;】\u0026#34;); var _url = encodeURIComponent(document.location); var _appkey = encodeURI(\u0026#34;xx\u0026#34;);//你从微薄获得的appkey  var _pic = encodeURI(picUrl); var _site = \u0026#39;\u0026#39;;//你的网站地址  var _u = \u0026#39;http://service.weibo.com/share/share.php?url=\u0026#39;+_url+\u0026#39;\u0026amp;appkey=\u0026#39;+_appkey+\u0026#39;\u0026amp;pic=\u0026#39;+_pic+\u0026#39;\u0026amp;title=\u0026#39;+_t; window.open( _u,\u0026#39;\u0026#39;, \u0026#39;width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\u0026#39; ); } function Torenren(title,picUrl,description){ var _t = encodeURI(\u0026#34;【xx：\u0026#34;+title+\u0026#34;】\u0026#34;); var _url = encodeURIComponent(document.location); var _appkey = encodeURI(\u0026#34;xx\u0026#34;);//你从微薄获得的appkey  var _pic = encodeURI(picUrl); var _site = \u0026#39;\u0026#39;;//你的网站地址  var _d = !description? encodeURI(title) : encodeURI(description); //var _u = \u0026#39;http://share.renren.com/share/buttonshare.do?title=\u0026#39;+_t+\u0026#39;\u0026amp;link=\u0026#39;+_url+\u0026#39;\u0026amp;pic=\u0026#39;+_pic;  var _u = \u0026#39;http://widget.renren.com/dialog/share?resourceUrl=\u0026#39;+_url+\u0026#39;\u0026amp;srcUrl=\u0026#39;+_url+\u0026#39;\u0026amp;title=\u0026#39;+_t+\u0026#39;\u0026amp;pic=\u0026#39;+_pic+\u0026#39;\u0026amp;description=\u0026#39;+_d; window.open( _u,\u0026#39;\u0026#39;, \u0026#39;width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\u0026#39; ); } function Tozone(title,picUrl,description){ var _t = encodeURI(\u0026#34;【xx：\u0026#34;+title+\u0026#34;】\u0026#34;); var _url = encodeURIComponent(document.location); var _pic = encodeURI(picUrl); var _site = \u0026#39;\u0026#39;;//你的网站地址  var _d = !description? encodeURI(title) : encodeURI(description); var _u = \u0026#39;http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=\u0026#39;+_url+\u0026#39;\u0026amp;title=\u0026#39;+_t+\u0026#39;\u0026amp;pics=\u0026#39;+_pic+\u0026#39;\u0026amp;desc=\u0026#39;+_d; window.open( _u,\u0026#39;\u0026#39;, \u0026#39;width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\u0026#39; ); } ","date":"2015-02-09T11:48:44Z","permalink":"https://www.johnyn.com/2015/02/09/%E7%AE%80%E5%8D%95%E7%9A%84js%E5%88%86%E4%BA%AB%E4%BB%A3%E7%A0%81/","section":"post","tags":null,"title":"简单的js分享代码"},{"categories":null,"contents":"\u0026lt;?php header(\u0026#34;Content-type:text/html;charset=utf-8\u0026#34;); // $file_name=\u0026#34;cookie.jpg\u0026#34;;  $file_name = $_GET[\u0026#39;file\u0026#39;]; //用以解决中文不能显示出来的问题  $file_name=iconv(\u0026#34;utf-8\u0026#34;,\u0026#34;gb2312\u0026#34;,$file_name); $file_sub_path=$_SERVER[\u0026#39;DOCUMENT_ROOT\u0026#39;].\u0026#34;/../kanban\u0026#34;; $file_path=$file_sub_path.$file_name; //echo $file_path;exit;  //首先要判断给定的文件存在与否  if(!file_exists($file_path)){ echo \u0026#34;没有该文件文件\u0026#34;; return ; } $fp=fopen($file_path,\u0026#34;r\u0026#34;); $file_size=filesize($file_path); //下载文件需要用到的头  Header(\u0026#34;Content-type: application/octet-stream\u0026#34;); Header(\u0026#34;Accept-Ranges: bytes\u0026#34;); Header(\u0026#34;Accept-Length:\u0026#34;.$file_size); Header(\u0026#34;Content-Disposition: attachment; filename=\u0026#34;.$file_name); $buffer=1024; $file_count=0; //向浏览器返回数据  while(!feof($fp) \u0026amp;\u0026amp; $file_count\u0026lt;$file_size){ $file_con=fread($fp,$buffer); $file_count+=$buffer; echo $file_con; } fclose($fp); ","date":"2015-01-23T11:48:44Z","permalink":"https://www.johnyn.com/2015/01/23/php%E5%AE%9E%E7%8E%B0%E4%B8%8B%E8%BD%BD%E4%B8%AD%E6%96%87%E6%96%87%E4%BB%B6%E4%B8%8D%E4%B9%B1%E7%A0%81/","section":"post","tags":null,"title":"php实现下载中文文件不乱码"},{"categories":null,"contents":"foreach($row as $k=\u0026gt;$v3){ $temp_arr[] = $v3['num']; array_multisort($temp_arr,SORT_DESC,$row); }  ","date":"2014-11-26T11:48:44Z","permalink":"https://www.johnyn.com/2014/11/26/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%AE%89%E8%A3%85%E5%AD%90%E6%95%B0%E7%BB%84%E6%9F%90%E4%B8%AA%E5%80%BC%E6%8E%92%E5%BA%8F/","section":"post","tags":null,"title":"二维数组安装子数组某个值排序"},{"categories":null,"contents":"1.打开网站https://raw.github.com/TryGhost/Ghost-Config/master/init.d/ghost\n2.复制内容\n3.vi /etc/init.d/ghost 粘贴\n4.修改GHOST_ROOT的值 /usr/local/nodejs/ghost\n5.修改DAEMON的值 /usr/local/nodejs/bin/node\n6.esc :q 保存\nuseradd -r ghost -U\nchown -R ghost:ghost /usr/local/nodejs/ghost\nchmod 755 /etc/init.d/ghost\n$ sudo service ghost start\n$ sudo service ghost stop\n$ sudo service ghost restart\n$ sudo service ghost status\n为了让 Ghost 能在系统启动时同时启动，我们必须要将刚刚创建的初始化脚本注册为为启动项。 执行以下两个命令：\n$ sudo update-rc.d ghost defaults\n$ sudo update-rc.d ghost enable\n","date":"2014-11-07T11:48:44Z","permalink":"https://www.johnyn.com/2014/11/07/%E6%8A%8Aghost%E5%8A%A0%E5%85%A5%E5%90%AF%E5%8A%A8%E9%A1%B9/","section":"post","tags":null,"title":"把ghost加入启动项"},{"categories":null,"contents":"//Monkey\u0026#39;s 二元分词  function sp_str($str) { $str=iconv(\u0026#34;UTF-8\u0026#34;,\u0026#34;GBK\u0026#34;,$str); //所有汉字后添加ASCII的0字符,此法是为了排除特殊中文拆分错误的问题  $str=preg_replace(\u0026#34;/[\\x80-\\xff]{2}/\u0026#34;,\u0026#34;\\\\0\u0026#34;.chr(0x00),$str); //拆分的分割符  $search = array(\u0026#34;,\u0026#34;, \u0026#34;/\u0026#34;, \u0026#34;\\\\\u0026#34;, \u0026#34;.\u0026#34;, \u0026#34;;\u0026#34;, \u0026#34;:\u0026#34;, \u0026#34;\\\u0026#34;\u0026#34;, \u0026#34;!\u0026#34;, \u0026#34;~\u0026#34;, \u0026#34;`\u0026#34;, \u0026#34;^\u0026#34;, \u0026#34;(\u0026#34;, \u0026#34;)\u0026#34;, \u0026#34;?\u0026#34;, \u0026#34;-\u0026#34;, \u0026#34;\\t\u0026#34;, \u0026#34;\\n\u0026#34;, \u0026#34;\u0026#39;\u0026#34;, \u0026#34;\u0026lt;\u0026#34;, \u0026#34;\u0026gt;\u0026#34;, \u0026#34;\\r\u0026#34;, \u0026#34;\\r\\n\u0026#34;, \u0026#34;$\u0026#34;, \u0026#34;\u0026amp;\u0026#34;, \u0026#34;%\u0026#34;, \u0026#34;#\u0026#34;, \u0026#34;@\u0026#34;, \u0026#34;+\u0026#34;, \u0026#34;=\u0026#34;, \u0026#34;{\u0026#34;, \u0026#34;}\u0026#34;, \u0026#34;[\u0026#34;, \u0026#34;]\u0026#34;, \u0026#34;：\u0026#34;, \u0026#34;）\u0026#34;, \u0026#34;（\u0026#34;, \u0026#34;．\u0026#34;, \u0026#34;。\u0026#34;, \u0026#34;，\u0026#34;, \u0026#34;！\u0026#34;, \u0026#34;；\u0026#34;, \u0026#34;“\u0026#34;, \u0026#34;”\u0026#34;, \u0026#34;‘\u0026#34;, \u0026#34;’\u0026#34;, \u0026#34;［\u0026#34;, \u0026#34;］\u0026#34;, \u0026#34;、\u0026#34;, \u0026#34;—\u0026#34;, \u0026#34;　\u0026#34;, \u0026#34;《\u0026#34;, \u0026#34;》\u0026#34;, \u0026#34;－\u0026#34;, \u0026#34;…\u0026#34;, \u0026#34;【\u0026#34;, \u0026#34;】\u0026#34;,); //替换所有的分割符为空格  $str = str_replace($search,\u0026#39; \u0026#39;,$str); //用正则匹配半角单个字符或者全角单个字符,存入数组$ar  preg_match_all(\u0026#34;/[\\x80-\\xff]?./\u0026#34;,$str,$ar);$ar=$ar[0]; //去掉$ar中ASCII为0字符的项目  for ($i=0;$i\u0026lt;count($ar);$i++) if ($ar[$i]!=chr(0x00) \u0026amp;\u0026amp; trim($ar[$i])) $ar_new[]=$ar[$i]; $ar=$ar_new;unset($ar_new);$oldsw=0; //把连续的半角存成一个数组下标,或者全角的每2个字符存成一个数组的下标  for ($ar_str=\u0026#39;\u0026#39;,$i=0;$i\u0026lt;count($ar);$i++) { $sw=strlen($ar[$i]); if ($i\u0026gt;0 and $sw!=$oldsw) $ar_str.=\u0026#34;\u0026#34;; if ($sw==1) $ar_str.=$ar[$i]; else if (strlen($ar[$i+1])==2) $ar_str.=\u0026#39;\u0026#34;\u0026#39;.$ar[$i].\u0026#34;+\u0026#34;.$ar[$i+1].\u0026#39;\u0026#34;\u0026#39;; elseif ($oldsw==1 or $oldsw==0) $ar_str.=\u0026#34;\u0026#34;.$ar[$i]; $oldsw=$sw; } //去掉连续的空格  $ar_str=trim(preg_replace(\u0026#34;# {1,}#i\u0026#34;,\u0026#34; \u0026#34;,$ar_str));//$ar_str = \u0026#34;Monkey s 二元 元分 分词\u0026#34;  //返回拆分后的结果  $ar_str=iconv(\u0026#34;GBK\u0026#34;,\u0026#34;UTF-8\u0026#34;,$ar_str); return $ar_str; } ","date":"2014-10-30T10:56:44Z","permalink":"https://www.johnyn.com/2014/10/30/%E4%BA%8C%E5%85%83%E5%88%86%E8%AF%8D/","section":"post","tags":null,"title":"二元分词"},{"categories":null,"contents":"启动mongo：bin/mongod -port 27017 –dbpath data/ –logpath log/mongodb.log\n下载php-mongodb-driver: wget https://github.com/mongodb/mongo-php-driver/archive/master.zip\n解压： unzip master.zip\n进入目录：cd mongo-php-driver-master/\n安装：\nphpize\n./configure\nmake install\n添加extension=mongo.so到php.ini\n重启apache ：/etc/init.d/apache2 restart\n下载rockmongo\nwget http://github.com/iwind/rockmongo/archive/master.zip\nunzip master.zip\n","date":"2014-10-09T10:56:44Z","permalink":"https://www.johnyn.com/2014/10/09/php-mongo%E6%89%A9%E5%B1%95%E4%BB%A5%E5%8F%8Arockmongo%E5%AE%89%E8%A3%85/","section":"post","tags":null,"title":"php-mongo扩展以及rockmongo安装"},{"categories":null,"contents":"wget http://www.ftphp.com/scws/down/scws-1.1.3.tar.bz2 //源码包  　wget http://www.ftphp.com/scws/down/scws-dict-chs-utf8.tar.bz2 //utf8词典，\n　wget http://www.ftphp.com/scws/down/scws-dict-chs-gbk.tar.bz2\n　[root@localhost src]# tar xjvf scws-1.1.3.tar.bz2\n　[root@localhost src]# cd scws-1.1.3\n　编译scws：\n　[root@localhost scws-1.1.3]# ./configure –prefix=/usr/local/scws\n　[root@localhost scws-1.1.3]# make\n　[root@localhost scws-1.1.3]# make install\n　[root@localhost scws-1.1.3]# ls -al /usr/local/scws/lib/libscws.la //看看有没有这个文件，如果有就说明安装成功了。\n　[root@localhost scws-1.1.3]# /usr/local/scws/bin/scws -h //这个也是看看安装成功了没有，如果看到下面输出，也说明安装成功。\n　scws (scws-cli/1.1.3)\n　Simple Chinese Word Segmentation – Command line usage.\n　Copyright (C)2007 by hightman.\n　安装中文分词的php扩展：\n　安装此扩展要求您的 php 和系统环境安装了相应的 autoconf automake 工具及 phpize 。\n　[root@localhost src]# tar xjvf scws-dict-chs-utf8.tar.bz2 -C /usr/local/scws/etc //把utf8词典安装到scws指定的目录下。\n　1）.进入源码目录的 phpext/ 目录\n　[root@localhostcd ~]# cd /usr/local/src/scws-1.1.3/phpext/\n　2）.执行 phpize （在PHP安装目录的bin/目录下）\n　[root@localhost phpext]# /usr/local/php/bin/phpize\n　#Configuring for:\n　#PHP Api Version: 20090626\n　#Zend Module Api No: 20090626\n　#Zend Extension Api No: 220090626\n　3）.进行编译\n　[root@localhost phpext]#\n ./configure --with-scws=/usr/local/scws  　[root@localhost phpext]# make\n　[root@localhost phpext]# make install\n　4）. 找到php.ini的位置，并修改和加入内容\n　[root@localhost phpext]# vi /etc/php5/apache2/php.ini\n　加上\n　[scws]\n　extension = scws.so\n　scws.default.charset = utf8\n　scws.default.fpath = /usr/local/scws/etc\n　[root@localhost phpext]#php -m //执行 php -m 就能看到 scws 了或者在 phpinfo() 中 scws 的相关部分\n　重启Apache\n","date":"2014-08-07T11:48:44Z","permalink":"https://www.johnyn.com/2014/08/07/unbutu-%E5%AE%89%E8%A3%85scws%E5%88%86%E8%AF%8D/","section":"post","tags":null,"title":"unbutu 安装scws分词"},{"categories":null,"contents":"安装：apt-get install sphinxsearch\n启动： /etc/init.d/sphinxsearch start\n创建索引：indexer –all 或 indexer -c/etc/sphinxsearch/sphinx.conf –all –rotate\n开启sphinxsearch功能\n编辑/etc/default/sphinxsearch文件 将START=no 修改为 START=yes 用vi打开编辑就可以了\n搜索: search -i test1 -q 刘德华\n","date":"2014-08-06T11:48:44Z","permalink":"https://www.johnyn.com/2014/08/06/sphinx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/","section":"post","tags":null,"title":"sphinx的安装与使用"},{"categories":null,"contents":"选择类\nCtrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。\nAlt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。\nCtrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。\nCtrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。\nCtrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。\nCtrl+M 光标移动至括号内结束或开始的位置。\nCtrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。\nCtrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。\nCtrl+Shift+[ 选中代码，按下快捷键，折叠代码。\nCtrl+Shift+] 选中代码，按下快捷键，展开代码。\nCtrl+K+0 展开所有折叠代码。\nCtrl+← 向左单位性地移动光标，快速移动光标。\nCtrl+→ 向右单位性地移动光标，快速移动光标。\nshift+↑ 向上选中多行。\nshift+↓ 向下选中多行。\nShift+← 向左选中文本。\nShift+→ 向右选中文本。\nCtrl+Shift+← 向左单位性地选中文本。\nCtrl+Shift+→ 向右单位性地选中文本。\nCtrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。\nCtrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。\nCtrl+Alt+↑ 向上添加多行光标，可同时编辑多行。\nCtrl+Alt+↓ 向下添加多行光标，可同时编辑多行。\n编辑类\nCtrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。\nCtrl+Shift+D 复制光标所在整行，插入到下一行。\nTab 向右缩进。\nShift+Tab 向左缩进。\nCtrl+K+K 从光标处开始删除代码至行尾。\nCtrl+Shift+K 删除整行。\nCtrl+/ 注释单行。\nCtrl+Shift+/ 注释多行。\nCtrl+K+U 转换大写。\nCtrl+K+L 转换小写。\nCtrl+Z 撤销。\nCtrl+Y 恢复撤销。\nCtrl+U 软撤销，感觉和 Gtrl+Z 一样。\nCtrl+F2 设置书签\nCtrl+T 左右字母互换。\nF6 单词检测拼写\n搜索类\nCtrl+F 打开底部搜索框，查找关键字。\nCtrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。\nCtrl+P 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。\nCtrl+G 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。\nCtrl+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。\nCtrl+： 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。\nCtrl+Shift+P 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。\nEsc 退出光标多行选择，退出搜索框，命令框等。\n显示类\nCtrl+Tab 按文件浏览过的顺序，切换当前窗口的标签页。\nCtrl+PageDown 向左切换当前窗口的标签页。\nCtrl+PageUp 向右切换当前窗口的标签页。\nAlt+Shift+1 窗口分屏，恢复默认1屏（非小键盘的数字）\nAlt+Shift+2 左右分屏-2列\nAlt+Shift+3 左右分屏-3列\nAlt+Shift+4 左右分屏-4列\nAlt+Shift+5 等分4屏\nAlt+Shift+8 垂直分屏-2屏\nAlt+Shift+9 垂直分屏-3屏\nCtrl+K+B 开启/关闭侧边栏。\nF11 全屏模式\nShift+F11 免打扰模式\n","date":"2014-07-23T11:48:44Z","permalink":"https://www.johnyn.com/2014/07/23/sublime-text-%E5%BF%AB%E6%8D%B7%E9%94%AE/","section":"post","tags":null,"title":"sublime text 快捷键"},{"categories":null,"contents":"快速入门 用 Markdown 语法写作是很容易的。在编辑界面的左侧就是你写作的地方。在你认为需要的时候，可以使用以下这些语法来格式化你的内容。例如下面这个无序列表：\n* Item number one * Item number two * A nested item * A final item  还可以是有序列表：\n1. Remember to buy some milk 2. Drink the milk 3. Tweet that I remembered to buy the milk, and drank it  链接  如果要链接其它页面，可以直接把页面的 URL 粘贴过来，例如 http://johnyn.com - 会被自动识别为链接。但是，如果你想自定义链接文本，可以像这样： [后会有期](http://johnyn.com)。很简单吧！  图片 插入图片也没问题！前提是你事先知道图片的 URL，然后像下面这样：\n {\u0026lt;1\u0026gt;}![The](http://johnyn.com/img/author.jpg)  引用 有些时候我们需要引用别人说的话，可以这样：\n \u0026gt; Wisdomous - it's definitely a word.  代码 或许你是个码农，需要贴一些代码到文章里，可以通过两个引号（Tab 键上面的那个键）加入行内代码 \u0026lt;code\u0026gt;。如果需要加入大段的代码，可以在代码前加 4 个空格缩进，这就是 Markdown 的语法。\n.awesome-thing { display: block; width: 100%; }  分割线 在任一新行输入 3 个或更多的短横线（减号）就是一条分隔线了。\n 高级用法 Markdown 还有一个特别用法，就是在你需要的时候可以直接书写 HTML 代码。\n \u0026lt;input type=\u0026quot;text\u0026quot; placeholder=\u0026quot;这是个输入框！\u0026quot; /\u0026gt;  只要掌握了上面的这些介绍，你就已经入门了！继续写作吧！\n","date":"2014-07-11T14:56:44Z","permalink":"https://www.johnyn.com/2014/07/11/markdown%E8%AF%AD%E6%B3%95/","section":"post","tags":"markdown 语法","title":"markdown语法"},{"categories":null,"contents":"今天抓一个网页匹配内容出问题，仔细检查规则并无问题，删掉要匹配的内容一大半就可以，后来一搜索是 backtrack_limit的问题，在代码前面加如下代码就ok了\nini_set(\u0026lsquo;pcre.backtrack_limit\u0026rsquo;, 999999); ini_set(\u0026lsquo;pcre.recursion_limit\u0026rsquo;, 99999); ini_set(\u0026lsquo;memory_limit\u0026rsquo;, \u0026lsquo;64M\u0026rsquo;);\n","date":"2014-07-11T14:56:44Z","permalink":"https://www.johnyn.com/2014/07/11/preg_metch%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E9%97%AE%E9%A2%98/","section":"post","tags":null,"title":"preg_metch字符串长度问题"},{"categories":null,"contents":"ThinkPHP/Library/Think/Db/Driver 目录下的Pgsql.class.php 的102行 代码如下：\n\u0026lt;?php public function execute($str) { $this-\u0026gt;initConnect(true); if ( !$this-\u0026gt;_linkID ) return false; $this-\u0026gt;queryStr = $str; //释放前次的查询结果  if ( $this-\u0026gt;queryID ) $this-\u0026gt;free(); N(\u0026#39;db_write\u0026#39;,1); // 记录开始执行时间  G(\u0026#39;queryStartTime\u0026#39;); $result = pg_query($this-\u0026gt;_linkID,$str); $this-\u0026gt;debug(); if ( false === $result ) { $this-\u0026gt;error(); return false; } else { $this-\u0026gt;numRows = pg_affected_rows($result); if(stristr($str,\u0026#39;insert\u0026#39;)){ //修改部分  $this-\u0026gt;lastInsID = $this-\u0026gt;last_insert_id(); } return $this-\u0026gt;numRows; } } 注释部分 list($last_insert_id) = pg_fetch_array($result,null,PGSQL_ASSOC); 函数pg_fetch_array 返回的是关联数组 ，用list给变量赋值时返回null\n","date":"2014-06-23T14:56:44Z","permalink":"https://www.johnyn.com/2014/06/23/thinkphp%E7%9A%84pgsql%E6%A8%A1%E5%9E%8Bexecute%E6%96%B9%E6%B3%95bug/","section":"post","tags":["thinkphp","pgsql","execute"],"title":"thinkphp的pgsql模型execute方法bug"},{"categories":null,"contents":"hinkPHP/Library/Think/Db/Driver 目录下的Pgsql.class.php 的123行\n代码如下\n\u0026lt;?php /** * 用于获取最后插入的ID * @access public * @return integer */ public function last_insert_id() { $query = \u0026#34;SELECT LASTVAL() AS insert_id\u0026#34;; $result = pg_query($this-\u0026amp;gt;_linkID,$query); $arr = pg_fetch_array($result,null,PGSQL_ASSOC); //list($last_insert_id) = pg_fetch_array($result,null,PGSQL_ASSOC);  pg_free_result($result); // return $last_insert_id;  return $arr[\u0026#39;insert_id\u0026#39;]; } 注释部分 list($last_insert_id) = pg_fetch_array($result,null,PGSQL_ASSOC); 函数pg_fetch_array 返回的是关联数组 ，用list给变量赋值时返回null\n","date":"2014-06-23T14:48:44Z","permalink":"https://www.johnyn.com/2014/06/23/thinkphp%E7%9A%84pgsql%E6%A8%A1%E5%9E%8Bgetlastinsid%E8%8E%B7%E5%8F%96%E4%B8%8A%E6%AC%A1%E6%8F%92%E5%85%A5%E7%9A%84id%E7%9A%84bug/","section":"post","tags":["thinkphp","pgsql","getlastinsid"],"title":"thinkphp的pgsql模型getLastInsId()获取上次插入的id的bug"},{"categories":null,"contents":"首先，下载JDK安装包，到官网http://www.oracle.com/technetwork/java/javase/downloads/index.html进行下载，点左边的Java Platform (JDK) 7u51进入下一个下载页面，\n安装好后便是配置JDK的环境变量，在桌面上计算机点右键选属性，或是开始菜单计算机上点右键选属性， 左边点高级系统设置，点下边的环境变量，\n在新弹出窗口上，点系统变量区域下面的新建按钮，弹出新建窗口，变量名为JAVA_HOME，变量值填JDK安装的最终路径，我这里装的地址是D:\\Program Files\\Java\\jdk1.7.0_51，所以填D:\\Program Files\\Java\\jdk1.7.0_51，点确定完成，\n下面需要设置Path变量，由于系统本身已经存在这个变量，所以无需新建，在原本基本上添加JDK相关的，找到Path变量双击编辑，由于每个值之间用;符号间断，所以先在末尾加上;（注意是英文格式的，不要输其他符号空格等），加上;符号后在末尾加入%JAVA_HOME%\\bin，点确定完成，\n下面添加CLASSPATH变量，由于不存在，所以新建一个，变量名CLASSPATH，变量值%JAVA_HOME%lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar，首尾不带空格的，点确定完成，至此环境变量配置完成，点确定关掉环境变量配置窗口。\n上面步骤完成后，下面验证下是否配置成功，点开始运行输入cmd打开命令行窗口，输入java -version，显示版本1.7.0_51，输入javac -version，也显示1.7.0_51，说明JDK安装及环境变量配置成功。\n","date":"2014-06-21T11:48:44Z","permalink":"https://www.johnyn.com/2014/06/21/win7-64%E4%BD%8D%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85jdk%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/","section":"post","tags":"win7 JDK","title":"WIN7 64位系统安装JDK并配置环境变量"},{"categories":null,"contents":"","date":"2014-06-20T16:16:05Z","permalink":"https://www.johnyn.com/2014/06/20/vim%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%91%BD%E4%BB%A4%E5%9B%BE%E8%A7%A3/","section":"post","tags":"linux vim","title":"vim快捷键命令图解"},{"categories":null,"contents":"最近用到mongodb，以往习惯的把接收到的参数intval，谁知mongodb要查询的该字段是string，悲剧了……\n","date":"2014-05-16T11:48:44Z","permalink":"https://www.johnyn.com/2014/05/16/%E5%88%9D%E6%8E%A5%E8%A7%A6mongodb/","section":"post","tags":["mongodb"],"title":"初接触mongodb"}]